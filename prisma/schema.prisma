// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum CollectionType {
    MEN
    WOMEN
    BOYS
    GIRLS
    SALE
}

model Collection {
    id        Int              @id @default(autoincrement())
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    name      String           @db.VarChar(255)
    slug      String           @unique
    types     CollectionType[]
    parentId  Int?
    parent    Collection?      @relation(name: "ParentChild", fields: [parentId], references: [id])
    children  Collection[]     @relation(name: "ParentChild")
    products  Product[]
}

model Product {
    id           Int              @id @default(autoincrement())
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    name         String           @db.VarChar(255)
    description  String?
    price        Float
    rate         Float
    published    Boolean          @default(false)
    images       ProductImage[]
    colors       ProductColor[]
    sizes        ProductSize[]
    types        CollectionType[]
    collection   Collection       @relation(fields: [collectionId], references: [id])
    collectionId Int
    sale         Sale[]
    model        Model            @relation(fields: [modelId], references: [id])
    modelId      Int
}

model ProductImage {
    id        Int      @id @default(autoincrement())
    imageURL  String   @unique
    Product   Product? @relation(fields: [productId], references: [id])
    productId Int?
}

model Model {
    id       Int       @id @default(autoincrement())
    name     String
    products Product[]
    Brand    Brand?    @relation(fields: [brandId], references: [id])
    brandId  Int?
}

model Brand {
    id     Int     @id @default(autoincrement())
    name   String
    models Model[]
}

enum ProductSize {
    XXS
    XS
    S
    M
    L
    XL
    XXL
    XXXL
}

enum ProductColor {
    BLACK
    WHITE
    GRAY
    RED
    ORANGE
    YELLOW
    GREEN
    PINK
    BLUE
    PURPLE
}

model Sale {
    id         Int      @id @default(autoincrement())
    product    Product  @relation(fields: [productId], references: [id])
    quantity   Int
    totalPrice Float
    createdAt  DateTime @default(now())
    productId  Int
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String    @default("customer")
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
