// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Status {
    ACTIVE
    DRAFT
    DELETE
}

enum Role {
    ADMIN
    CUSTOMER
}

enum Color {
    BLACK
    BLUE
    BROWN
    GREEN
    GREY
    ORANGE
    PINK
    PURPLE
    RED
    WHITE
    YELLOW
}

model Collection {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    isDeleted   Boolean   @default(false)
    name        String    @unique
    slug        String    @unique
    description String?
    products    Product[] @relation("CollectionProducts")
}

model ProductImage {
    id               String          @id @default(cuid())
    url              String          @unique
    productId        String?
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
    productVariantId String?
}

model Product {
    id          String           @id @default(cuid())
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    name        String
    description String?
    type        String
    price       Float
    collections Collection[]     @relation("CollectionProducts")
    status      Status           @default(ACTIVE)
    taxable     Boolean          @default(true)
    vendor      Vendor?          @relation(fields: [vendorId], references: [id])
    vendorId    String?
    variants    ProductVariant[]
}

model ProductVariant {
    id            String         @id @default(cuid())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    name          String?
    generalColor  Color[]
    detailedColor String[]
    price         Float          @default(0)
    images        ProductImage[]
    status        Status         @default(ACTIVE)
    tags          ProductTag[]
    attribute     String
    Product       Product?       @relation(fields: [productId], references: [id])
    productId     String?
    sizes         ProductSize[]
}

model ProductSize {
    id           String          @id @default(cuid())
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
    isDeleted    Boolean         @default(false)
    size         String?
    stockAtStore Int             @default(0)
    stockOnline  Int             @default(0)
    sku          String?
    barcode      String?
    price        Float           @default(0)
    variant      ProductVariant? @relation(fields: [variantId], references: [id])
    variantId    String?
}

model Vendor {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    name      String    @unique
    products  Product[]
}

model ProductTag {
    id             String           @id @default(cuid())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    isDeleted      Boolean          @default(false)
    name           String           @unique
    ProductVariant ProductVariant[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(CUSTOMER)
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
