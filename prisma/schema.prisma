// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Collection {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    isDeleted   Boolean   @default(false)
    name        String    @unique
    slug        String    @unique
    description String?
    products    Product[] @relation("CollectionProducts")
}

model ProductImage {
    id        Int      @id @default(autoincrement())
    url       String   @unique
    productId Int?
    product   Product? @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id            Int              @id @default(autoincrement())
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    isDeleted     Boolean          @default(false)
    title         String
    description   String?
    status        String           @default("active")
    collections   Collection[]     @relation("CollectionProducts")
    vendor        Vendor?          @relation(fields: [vendorId], references: [id])
    vendorId      Int?
    productType   ProductType?     @relation(fields: [productTypeId], references: [id])
    productTypeId Int?
    tags          ProductTag[]
    images        ProductImage[]
    variants      ProductVariant[]
}

model ProductVariant {
    id             Int      @id @default(autoincrement())
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    isDeleted      Boolean  @default(false)
    title          String?
    sku            String?
    barcode        String?
    price          Float    @default(0)
    compareAtPrice Float?
    taxable        Boolean  @default(true)
    stock          Int      @default(0)
    color          String?
    size           String?
    Product        Product? @relation(fields: [productId], references: [id])
    productId      Int?
}

model Vendor {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    name      String    @unique
    products  Product[]
}

model ProductType {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    name      String    @unique
    products  Product[]
}

model ProductTag {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    name      String    @unique
    products  Product[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String    @default("customer")
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
